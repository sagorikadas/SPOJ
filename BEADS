/*
BEADS
Time Complexity - n(logn)^2
Algo - Suffix Array
*/
#include<iostream>
#include<algorithm>
#include<cstring>
#include<string>

#define MAX 100005
using namespace std;

int lcp[MAX];
string str;

struct suff
{
       int index;
       int rank[2];
       }s[MAX];

bool cmp(suff i, suff j)
{
     if(i.rank[0]!=j.rank[0])
     return i.rank[0]<j.rank[0];
     else
     return i.rank[1]<j.rank[1];
     
     }
     
void buildSA()
{
     int n=str.size();
     for(int i=0;i<n;i++)
     {
     s[i].index=i;
     s[i].rank[0]=str[i];
     s[i].rank[1]=((i+1)<n)? str[i+1]:-1;        
     }
     
     sort(s,s+n,cmp);

     int inv[n];
     
     for(int j=4;j<2*n;j*=2)
     {
             
              int k=0;
              int prev=s[0].rank[0];
              s[0].rank[0]=k;
              inv[s[0].index]=0;
              
             for(int i=1;i<n;i++)
             {
             
             if(s[i].rank[0]==prev&&s[i].rank[1]==s[i-1].rank[1])       
             {
             prev=s[i].rank[0];
             s[i].rank[0]=k;                                                           
             }      
             else
             {
                 prev=s[i].rank[0];
                 s[i].rank[0]=++k;
                 }
                   inv[s[i].index]=i;  
             }
             
             for(int i=0;i<n;i++)
             {
              int next = s[i].index + j/2;
              s[i].rank[1] = (next < n)? s[inv[next]].rank[0]: -1;
                     
             }
             sort(s,s+n,cmp);
             }
  
     }
     
     void buildLCP()
     {
     lcp[0]=0;
          int k=0;
          int n=str.size();
          int rank[n];
    for(int i=0; i<n; i++) rank[s[i].index]=i;
    for(int i=0; i<n; i++)
    {
        if(rank[i]!=n-1) {
        int j=s[rank[i]+1].index;
        while(i+k<n && j+k<n && str[i+k]==str[j+k]) k++;
        lcp[rank[i]]=k;
        if(k)
        k--;
        }
        else
        lcp[rank[i]]=0;
    }
          }

int main()
{
    std::ios::sync_with_stdio(0);
    int T;
   cin>>T;
    while(T--)
    {
    cin>>str;
    
    str=str+str+'~';
    int n=str.size();
    buildSA();
    int min=MAX;
    for(int i=0;i<n;i++)
    {
            if(s[i].index<n/2)
            {cout<<s[i].index+1<<endl;break;}
          }
          }
     return 0;
}
